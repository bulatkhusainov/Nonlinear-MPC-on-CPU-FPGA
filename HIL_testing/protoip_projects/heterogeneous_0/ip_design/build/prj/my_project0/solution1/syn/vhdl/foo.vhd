-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity foo is
generic (
    C_S_AXI_BUS_A_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_BUS_A_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_INOUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_INOUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEMORY_INOUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEMORY_INOUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEMORY_INOUT_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEMORY_INOUT_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_MEMORY_INOUT_USER_VALUE : INTEGER := 0 );
port (
    s_axi_BUS_A_AWVALID : IN STD_LOGIC;
    s_axi_BUS_A_AWREADY : OUT STD_LOGIC;
    s_axi_BUS_A_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_WVALID : IN STD_LOGIC;
    s_axi_BUS_A_WREADY : OUT STD_LOGIC;
    s_axi_BUS_A_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH/8-1 downto 0);
    s_axi_BUS_A_ARVALID : IN STD_LOGIC;
    s_axi_BUS_A_ARREADY : OUT STD_LOGIC;
    s_axi_BUS_A_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_BUS_A_ADDR_WIDTH-1 downto 0);
    s_axi_BUS_A_RVALID : OUT STD_LOGIC;
    s_axi_BUS_A_RREADY : IN STD_LOGIC;
    s_axi_BUS_A_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_BUS_A_DATA_WIDTH-1 downto 0);
    s_axi_BUS_A_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_BUS_A_BVALID : OUT STD_LOGIC;
    s_axi_BUS_A_BREADY : IN STD_LOGIC;
    s_axi_BUS_A_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_memory_inout_AWVALID : OUT STD_LOGIC;
    m_axi_memory_inout_AWREADY : IN STD_LOGIC;
    m_axi_memory_inout_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ADDR_WIDTH-1 downto 0);
    m_axi_memory_inout_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ID_WIDTH-1 downto 0);
    m_axi_memory_inout_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memory_inout_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_inout_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_inout_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_AWUSER_WIDTH-1 downto 0);
    m_axi_memory_inout_WVALID : OUT STD_LOGIC;
    m_axi_memory_inout_WREADY : IN STD_LOGIC;
    m_axi_memory_inout_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_DATA_WIDTH-1 downto 0);
    m_axi_memory_inout_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_DATA_WIDTH/8-1 downto 0);
    m_axi_memory_inout_WLAST : OUT STD_LOGIC;
    m_axi_memory_inout_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ID_WIDTH-1 downto 0);
    m_axi_memory_inout_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_WUSER_WIDTH-1 downto 0);
    m_axi_memory_inout_ARVALID : OUT STD_LOGIC;
    m_axi_memory_inout_ARREADY : IN STD_LOGIC;
    m_axi_memory_inout_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ADDR_WIDTH-1 downto 0);
    m_axi_memory_inout_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ID_WIDTH-1 downto 0);
    m_axi_memory_inout_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_memory_inout_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_inout_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_memory_inout_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_memory_inout_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ARUSER_WIDTH-1 downto 0);
    m_axi_memory_inout_RVALID : IN STD_LOGIC;
    m_axi_memory_inout_RREADY : OUT STD_LOGIC;
    m_axi_memory_inout_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_DATA_WIDTH-1 downto 0);
    m_axi_memory_inout_RLAST : IN STD_LOGIC;
    m_axi_memory_inout_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ID_WIDTH-1 downto 0);
    m_axi_memory_inout_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_RUSER_WIDTH-1 downto 0);
    m_axi_memory_inout_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_BVALID : IN STD_LOGIC;
    m_axi_memory_inout_BREADY : OUT STD_LOGIC;
    m_axi_memory_inout_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_memory_inout_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_ID_WIDTH-1 downto 0);
    m_axi_memory_inout_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEMORY_INOUT_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of foo is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "foo,hls_ip_2015_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=414,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1611,HLS_SYN_LUT=1639}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_pp0_stg0_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st12_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st13_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st14_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st15_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st16_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st17_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_pp1_stg0_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st21_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st22_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_pp2_stg0_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st26_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st27_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_st28_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st29_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_64 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal byte_block_in_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal byte_block_in_offset_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal byte_block_in_offset_0_vld_reg : STD_LOGIC := '0';
    signal byte_block_in_offset_0_ack_out : STD_LOGIC;
    signal byte_x_in_in_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal byte_x_in_in_offset_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal byte_x_in_in_offset_0_vld_reg : STD_LOGIC := '0';
    signal byte_x_in_in_offset_0_ack_out : STD_LOGIC;
    signal byte_y_out_out_offset : STD_LOGIC_VECTOR (31 downto 0);
    signal byte_y_out_out_offset_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal byte_y_out_out_offset_0_vld_reg : STD_LOGIC := '0';
    signal byte_y_out_out_offset_0_ack_out : STD_LOGIC;
    signal block_in_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal block_in_int_ce0 : STD_LOGIC;
    signal block_in_int_we0 : STD_LOGIC;
    signal block_in_int_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_in_int_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_in_in_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_in_in_int_ce0 : STD_LOGIC;
    signal x_in_in_int_we0 : STD_LOGIC;
    signal x_in_in_int_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_in_in_int_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal foo_BUS_A_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal memory_inout_AWVALID : STD_LOGIC;
    signal memory_inout_AWREADY : STD_LOGIC;
    signal memory_inout_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_inout_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_inout_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_WVALID : STD_LOGIC;
    signal memory_inout_WREADY : STD_LOGIC;
    signal memory_inout_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_WLAST : STD_LOGIC;
    signal memory_inout_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_ARVALID : STD_LOGIC;
    signal memory_inout_ARREADY : STD_LOGIC;
    signal memory_inout_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_inout_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memory_inout_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memory_inout_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_RVALID : STD_LOGIC;
    signal memory_inout_RREADY : STD_LOGIC;
    signal memory_inout_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memory_inout_RLAST : STD_LOGIC;
    signal memory_inout_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_BVALID : STD_LOGIC;
    signal memory_inout_BREADY : STD_LOGIC;
    signal memory_inout_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal memory_inout_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal memory_inout_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal foo_memory_inout_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal indvar_reg_168 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar_reg_168_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_313 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_322 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar8_reg_180 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_indvar8_reg_180_pp1_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_338 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_395 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_345 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar1_reg_192 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal byte_y_out_out_offset_read_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_367 : BOOLEAN;
    signal byte_x_in_in_offset_read_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_reg_366 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_383 : BOOLEAN;
    signal ap_sig_ioackin_memory_inout_ARREADY : STD_LOGIC;
    signal exitcond_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_377_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next_fu_252_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_next_reg_381 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_403 : BOOLEAN;
    signal tmp_2_fu_263_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_395_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next9_fu_296_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_next9_reg_399 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_307_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_425 : BOOLEAN;
    signal ap_sig_ioackin_memory_inout_AWREADY : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_ap_done : STD_LOGIC;
    signal exitcond2_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp2_stg0_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_446 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_413_pp2_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_memory_inout_WREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal indvar_next1_fu_340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_out_out_int_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_out_out_int_load_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_480 : BOOLEAN;
    signal ap_sig_cseq_ST_st17_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_492 : BOOLEAN;
    signal y_out_out_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_out_out_int_ce0 : STD_LOGIC;
    signal y_out_out_int_we0 : STD_LOGIC;
    signal y_out_out_int_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_foo_foo_user_fu_203_ap_start : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_ap_idle : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_ap_ready : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_block_in_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_foo_foo_user_fu_203_block_in_int_ce0 : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_block_in_int_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_foo_foo_user_fu_203_x_in_in_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_foo_foo_user_fu_203_x_in_in_int_ce0 : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_x_in_in_int_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_foo_foo_user_fu_203_y_out_out_int_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_foo_foo_user_fu_203_y_out_out_int_ce0 : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_y_out_out_int_we0 : STD_LOGIC;
    signal grp_foo_foo_user_fu_203_y_out_out_int_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_phi_fu_172_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar8_phi_fu_184_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_foo_foo_user_fu_203_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st21_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_546 : BOOLEAN;
    signal tmp_3_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_memory_inout_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_memory_inout_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_memory_inout_WREADY : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st29_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_601 : BOOLEAN;
    signal ap_sig_bdd_606 : BOOLEAN;
    signal tmp_5_cast_fu_270_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_cast_fu_314_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_sig_bdd_775 : BOOLEAN;
    signal ap_sig_bdd_563 : BOOLEAN;
    signal ap_sig_bdd_589 : BOOLEAN;
    signal ap_sig_bdd_561 : BOOLEAN;

    component foo_foo_user IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_in_int_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        block_in_int_ce0 : OUT STD_LOGIC;
        block_in_int_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_in_in_int_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        x_in_in_int_ce0 : OUT STD_LOGIC;
        x_in_in_int_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        y_out_out_int_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        y_out_out_int_ce0 : OUT STD_LOGIC;
        y_out_out_int_we0 : OUT STD_LOGIC;
        y_out_out_int_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_block_in_int IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_y_out_out_int IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_BUS_A_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        byte_block_in_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        byte_x_in_in_offset : OUT STD_LOGIC_VECTOR (31 downto 0);
        byte_y_out_out_offset : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component foo_memory_inout_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    block_in_int_U : component foo_block_in_int
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => block_in_int_address0,
        ce0 => block_in_int_ce0,
        we0 => block_in_int_we0,
        d0 => block_in_int_d0,
        q0 => block_in_int_q0);

    x_in_in_int_U : component foo_block_in_int
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x_in_in_int_address0,
        ce0 => x_in_in_int_ce0,
        we0 => x_in_in_int_we0,
        d0 => x_in_in_int_d0,
        q0 => x_in_in_int_q0);

    foo_BUS_A_s_axi_U : component foo_BUS_A_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_BUS_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_BUS_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_BUS_A_AWVALID,
        AWREADY => s_axi_BUS_A_AWREADY,
        AWADDR => s_axi_BUS_A_AWADDR,
        WVALID => s_axi_BUS_A_WVALID,
        WREADY => s_axi_BUS_A_WREADY,
        WDATA => s_axi_BUS_A_WDATA,
        WSTRB => s_axi_BUS_A_WSTRB,
        ARVALID => s_axi_BUS_A_ARVALID,
        ARREADY => s_axi_BUS_A_ARREADY,
        ARADDR => s_axi_BUS_A_ARADDR,
        RVALID => s_axi_BUS_A_RVALID,
        RREADY => s_axi_BUS_A_RREADY,
        RDATA => s_axi_BUS_A_RDATA,
        RRESP => s_axi_BUS_A_RRESP,
        BVALID => s_axi_BUS_A_BVALID,
        BREADY => s_axi_BUS_A_BREADY,
        BRESP => s_axi_BUS_A_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => foo_BUS_A_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        byte_block_in_offset => byte_block_in_offset,
        byte_x_in_in_offset => byte_x_in_in_offset,
        byte_y_out_out_offset => byte_y_out_out_offset);

    foo_memory_inout_m_axi_U : component foo_memory_inout_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEMORY_INOUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEMORY_INOUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEMORY_INOUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEMORY_INOUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEMORY_INOUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEMORY_INOUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEMORY_INOUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEMORY_INOUT_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_MEMORY_INOUT_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_MEMORY_INOUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEMORY_INOUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEMORY_INOUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_memory_inout_AWVALID,
        AWREADY => m_axi_memory_inout_AWREADY,
        AWADDR => m_axi_memory_inout_AWADDR,
        AWID => m_axi_memory_inout_AWID,
        AWLEN => m_axi_memory_inout_AWLEN,
        AWSIZE => m_axi_memory_inout_AWSIZE,
        AWBURST => m_axi_memory_inout_AWBURST,
        AWLOCK => m_axi_memory_inout_AWLOCK,
        AWCACHE => m_axi_memory_inout_AWCACHE,
        AWPROT => m_axi_memory_inout_AWPROT,
        AWQOS => m_axi_memory_inout_AWQOS,
        AWREGION => m_axi_memory_inout_AWREGION,
        AWUSER => m_axi_memory_inout_AWUSER,
        WVALID => m_axi_memory_inout_WVALID,
        WREADY => m_axi_memory_inout_WREADY,
        WDATA => m_axi_memory_inout_WDATA,
        WSTRB => m_axi_memory_inout_WSTRB,
        WLAST => m_axi_memory_inout_WLAST,
        WID => m_axi_memory_inout_WID,
        WUSER => m_axi_memory_inout_WUSER,
        ARVALID => m_axi_memory_inout_ARVALID,
        ARREADY => m_axi_memory_inout_ARREADY,
        ARADDR => m_axi_memory_inout_ARADDR,
        ARID => m_axi_memory_inout_ARID,
        ARLEN => m_axi_memory_inout_ARLEN,
        ARSIZE => m_axi_memory_inout_ARSIZE,
        ARBURST => m_axi_memory_inout_ARBURST,
        ARLOCK => m_axi_memory_inout_ARLOCK,
        ARCACHE => m_axi_memory_inout_ARCACHE,
        ARPROT => m_axi_memory_inout_ARPROT,
        ARQOS => m_axi_memory_inout_ARQOS,
        ARREGION => m_axi_memory_inout_ARREGION,
        ARUSER => m_axi_memory_inout_ARUSER,
        RVALID => m_axi_memory_inout_RVALID,
        RREADY => m_axi_memory_inout_RREADY,
        RDATA => m_axi_memory_inout_RDATA,
        RLAST => m_axi_memory_inout_RLAST,
        RID => m_axi_memory_inout_RID,
        RUSER => m_axi_memory_inout_RUSER,
        RRESP => m_axi_memory_inout_RRESP,
        BVALID => m_axi_memory_inout_BVALID,
        BREADY => m_axi_memory_inout_BREADY,
        BRESP => m_axi_memory_inout_BRESP,
        BID => m_axi_memory_inout_BID,
        BUSER => m_axi_memory_inout_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => foo_memory_inout_m_axi_U_ap_dummy_ce,
        I_ARVALID => memory_inout_ARVALID,
        I_ARREADY => memory_inout_ARREADY,
        I_ARADDR => memory_inout_ARADDR,
        I_ARID => memory_inout_ARID,
        I_ARLEN => memory_inout_ARLEN,
        I_ARSIZE => memory_inout_ARSIZE,
        I_ARLOCK => memory_inout_ARLOCK,
        I_ARCACHE => memory_inout_ARCACHE,
        I_ARQOS => memory_inout_ARQOS,
        I_ARPROT => memory_inout_ARPROT,
        I_ARUSER => memory_inout_ARUSER,
        I_ARBURST => memory_inout_ARBURST,
        I_ARREGION => memory_inout_ARREGION,
        I_RVALID => memory_inout_RVALID,
        I_RREADY => memory_inout_RREADY,
        I_RDATA => memory_inout_RDATA,
        I_RID => memory_inout_RID,
        I_RUSER => memory_inout_RUSER,
        I_RRESP => memory_inout_RRESP,
        I_RLAST => memory_inout_RLAST,
        I_AWVALID => memory_inout_AWVALID,
        I_AWREADY => memory_inout_AWREADY,
        I_AWADDR => memory_inout_AWADDR,
        I_AWID => memory_inout_AWID,
        I_AWLEN => memory_inout_AWLEN,
        I_AWSIZE => memory_inout_AWSIZE,
        I_AWLOCK => memory_inout_AWLOCK,
        I_AWCACHE => memory_inout_AWCACHE,
        I_AWQOS => memory_inout_AWQOS,
        I_AWPROT => memory_inout_AWPROT,
        I_AWUSER => memory_inout_AWUSER,
        I_AWBURST => memory_inout_AWBURST,
        I_AWREGION => memory_inout_AWREGION,
        I_WVALID => memory_inout_WVALID,
        I_WREADY => memory_inout_WREADY,
        I_WDATA => memory_inout_WDATA,
        I_WID => memory_inout_WID,
        I_WUSER => memory_inout_WUSER,
        I_WLAST => memory_inout_WLAST,
        I_WSTRB => memory_inout_WSTRB,
        I_BVALID => memory_inout_BVALID,
        I_BREADY => memory_inout_BREADY,
        I_BRESP => memory_inout_BRESP,
        I_BID => memory_inout_BID,
        I_BUSER => memory_inout_BUSER);

    y_out_out_int_U : component foo_y_out_out_int
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y_out_out_int_address0,
        ce0 => y_out_out_int_ce0,
        we0 => y_out_out_int_we0,
        d0 => y_out_out_int_d0,
        q0 => y_out_out_int_q0);

    grp_foo_foo_user_fu_203 : component foo_foo_user
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_foo_foo_user_fu_203_ap_start,
        ap_done => grp_foo_foo_user_fu_203_ap_done,
        ap_idle => grp_foo_foo_user_fu_203_ap_idle,
        ap_ready => grp_foo_foo_user_fu_203_ap_ready,
        block_in_int_address0 => grp_foo_foo_user_fu_203_block_in_int_address0,
        block_in_int_ce0 => grp_foo_foo_user_fu_203_block_in_int_ce0,
        block_in_int_q0 => grp_foo_foo_user_fu_203_block_in_int_q0,
        x_in_in_int_address0 => grp_foo_foo_user_fu_203_x_in_in_int_address0,
        x_in_in_int_ce0 => grp_foo_foo_user_fu_203_x_in_in_int_ce0,
        x_in_in_int_q0 => grp_foo_foo_user_fu_203_x_in_in_int_q0,
        y_out_out_int_address0 => grp_foo_foo_user_fu_203_y_out_out_int_address0,
        y_out_out_int_ce0 => grp_foo_foo_user_fu_203_y_out_out_int_ce0,
        y_out_out_int_we0 => grp_foo_foo_user_fu_203_y_out_out_int_we0,
        y_out_out_int_d0 => grp_foo_foo_user_fu_203_y_out_out_int_d0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_memory_inout_ARREADY assign process. --
    ap_reg_ioackin_memory_inout_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memory_inout_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_logic_0 = ap_sig_ioackin_memory_inout_ARREADY))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = tmp_2_fu_263_p3) and not(((ap_const_logic_0 = ap_sig_ioackin_memory_inout_ARREADY) and (ap_const_lv1_0 = tmp_2_fu_263_p3)))))) then 
                    ap_reg_ioackin_memory_inout_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_logic_1 = memory_inout_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = tmp_2_fu_263_p3) and (ap_const_logic_1 = memory_inout_ARREADY)))) then 
                    ap_reg_ioackin_memory_inout_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_memory_inout_AWREADY assign process. --
    ap_reg_ioackin_memory_inout_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memory_inout_AWREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_563) then
                    if (not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done)))) then 
                        ap_reg_ioackin_memory_inout_AWREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_775) then 
                        ap_reg_ioackin_memory_inout_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_memory_inout_WREADY assign process. --
    ap_reg_ioackin_memory_inout_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_memory_inout_WREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_589) then
                    if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                        ap_reg_ioackin_memory_inout_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = memory_inout_WREADY)) then 
                        ap_reg_ioackin_memory_inout_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_246_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond_fu_246_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_246_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_290_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = exitcond1_fu_290_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_290_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14)) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it0 assign process. --
    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it1 assign process. --
    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond2_fu_334_p2))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond2_fu_334_p2))))) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp2_it2 assign process. --
    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                if (not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2)))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))))) then 
                    ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- byte_block_in_offset_0_data_reg assign process. --
    byte_block_in_offset_0_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                byte_block_in_offset_0_data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = byte_block_in_offset_0_vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = byte_block_in_offset_0_vld_reg) and (ap_const_logic_1 = byte_block_in_offset_0_ack_out)))) then 
                    byte_block_in_offset_0_data_reg <= byte_block_in_offset;
                end if; 
            end if;
        end if;
    end process;


    -- byte_block_in_offset_0_vld_reg assign process. --
    byte_block_in_offset_0_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                
            else
            end if;
        end if;
    end process;


    -- byte_x_in_in_offset_0_data_reg assign process. --
    byte_x_in_in_offset_0_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                byte_x_in_in_offset_0_data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = byte_x_in_in_offset_0_vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = byte_x_in_in_offset_0_vld_reg) and (ap_const_logic_1 = byte_x_in_in_offset_0_ack_out)))) then 
                    byte_x_in_in_offset_0_data_reg <= byte_x_in_in_offset;
                end if; 
            end if;
        end if;
    end process;


    -- byte_x_in_in_offset_0_vld_reg assign process. --
    byte_x_in_in_offset_0_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                
            else
            end if;
        end if;
    end process;


    -- byte_y_out_out_offset_0_data_reg assign process. --
    byte_y_out_out_offset_0_data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                byte_y_out_out_offset_0_data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = byte_y_out_out_offset_0_vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = byte_y_out_out_offset_0_vld_reg) and (ap_const_logic_1 = byte_y_out_out_offset_0_ack_out)))) then 
                    byte_y_out_out_offset_0_data_reg <= byte_y_out_out_offset;
                end if; 
            end if;
        end if;
    end process;


    -- byte_y_out_out_offset_0_vld_reg assign process. --
    byte_y_out_out_offset_0_vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                
            else
            end if;
        end if;
    end process;


    -- grp_foo_foo_user_fu_203_ap_start_ap_start_reg assign process. --
    grp_foo_foo_user_fu_203_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_foo_foo_user_fu_203_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_16)) then 
                    grp_foo_foo_user_fu_203_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_foo_foo_user_fu_203_ap_ready)) then 
                    grp_foo_foo_user_fu_203_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- indvar1_reg_192 assign process. --
    indvar1_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond2_fu_334_p2))) then 
                indvar1_reg_192 <= indvar_next1_fu_340_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))))) then 
                indvar1_reg_192 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar8_reg_180 assign process. --
    indvar8_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond1_reg_395) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
                indvar8_reg_180 <= indvar_next9_reg_399;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_14)) then 
                indvar8_reg_180 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_168 assign process. --
    indvar_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                indvar_reg_168 <= indvar_next_reg_381;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                indvar_reg_168 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                ap_reg_ppstg_exitcond1_reg_395_pp1_it1 <= exitcond1_reg_395;
                ap_reg_ppstg_indvar8_reg_180_pp1_it1 <= indvar8_reg_180;
                exitcond1_reg_395 <= exitcond1_fu_290_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))))) then
                ap_reg_ppstg_exitcond2_reg_413_pp2_it1 <= exitcond2_reg_413;
                exitcond2_reg_413 <= exitcond2_fu_334_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_exitcond_reg_377_pp0_it1 <= exitcond_reg_377;
                ap_reg_ppstg_indvar_reg_168_pp0_it1 <= indvar_reg_168;
                exitcond_reg_377 <= exitcond_fu_246_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                byte_x_in_in_offset_read_reg_357 <= byte_x_in_in_offset_0_data_reg;
                byte_y_out_out_offset_read_reg_351 <= byte_y_out_out_offset_0_data_reg;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                indvar_next9_reg_399 <= indvar_next9_fu_296_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                indvar_next_reg_381 <= indvar_next_fu_252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond_reg_377 = ap_const_lv1_0) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond1_reg_395) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                reg_212 <= memory_inout_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = tmp_fu_218_p3))) then
                tmp_1_cast_reg_366 <= byte_block_in_offset_0_data_reg(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))))) then
                tmp_5_reg_404 <= byte_y_out_out_offset_read_reg_351(31 downto 31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and (ap_const_lv1_0 = exitcond2_reg_413))) then
                y_out_out_int_load_reg_427 <= y_out_out_int_q0;
            end if;
        end if;
    end process;
    byte_block_in_offset_0_vld_reg <= '0';
    byte_x_in_in_offset_0_vld_reg <= '0';
    byte_y_out_out_offset_0_vld_reg <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_322, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it0, ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, tmp_fu_218_p3, ap_sig_ioackin_memory_inout_ARREADY, exitcond_fu_246_p2, tmp_2_fu_263_p3, exitcond1_fu_290_p2, tmp_5_fu_307_p3, ap_sig_ioackin_memory_inout_AWREADY, grp_foo_foo_user_fu_203_ap_done, exitcond2_fu_334_p2, ap_reg_ppiten_pp2_it0, ap_reg_ppiten_pp2_it1, ap_reg_ppstg_exitcond2_reg_413_pp2_it1, ap_sig_ioackin_memory_inout_WREADY, ap_reg_ppiten_pp2_it2, ap_sig_bdd_606)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = tmp_fu_218_p3))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_memory_inout_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
            when ap_ST_pp0_stg0_fsm_8 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_246_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = exitcond_fu_246_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_8;
                end if;
            when ap_ST_st12_fsm_9 => 
                if ((not(((ap_const_logic_0 = ap_sig_ioackin_memory_inout_ARREADY) and (ap_const_lv1_0 = tmp_2_fu_263_p3))) and not((ap_const_lv1_0 = tmp_2_fu_263_p3)))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_16;
                elsif (((ap_const_lv1_0 = tmp_2_fu_263_p3) and not(((ap_const_logic_0 = ap_sig_ioackin_memory_inout_ARREADY) and (ap_const_lv1_0 = tmp_2_fu_263_p3))))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_9;
                end if;
            when ap_ST_st13_fsm_10 => 
                ap_NS_fsm <= ap_ST_st14_fsm_11;
            when ap_ST_st14_fsm_11 => 
                ap_NS_fsm <= ap_ST_st15_fsm_12;
            when ap_ST_st15_fsm_12 => 
                ap_NS_fsm <= ap_ST_st16_fsm_13;
            when ap_ST_st16_fsm_13 => 
                ap_NS_fsm <= ap_ST_st17_fsm_14;
            when ap_ST_st17_fsm_14 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
            when ap_ST_pp1_stg0_fsm_15 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_290_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and not((ap_const_lv1_0 = exitcond1_fu_290_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st21_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_15;
                end if;
            when ap_ST_st21_fsm_16 => 
                ap_NS_fsm <= ap_ST_st22_fsm_17;
            when ap_ST_st22_fsm_17 => 
                if (((ap_const_lv1_0 = tmp_5_fu_307_p3) and not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_18;
                elsif ((not((((ap_const_lv1_0 = tmp_5_fu_307_p3) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_AWREADY)) or (ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done))) and not((ap_const_lv1_0 = tmp_5_fu_307_p3)))) then
                    ap_NS_fsm <= ap_ST_st29_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_17;
                end if;
            when ap_ST_pp2_stg0_fsm_18 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_18;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))) and not((ap_const_lv1_0 = exitcond2_fu_334_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it1))))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_18;
                end if;
            when ap_ST_st26_fsm_19 => 
                ap_NS_fsm <= ap_ST_st27_fsm_20;
            when ap_ST_st27_fsm_20 => 
                ap_NS_fsm <= ap_ST_st28_fsm_21;
            when ap_ST_st28_fsm_21 => 
                ap_NS_fsm <= ap_ST_st29_fsm_22;
            when ap_ST_st29_fsm_22 => 
                if (not(ap_sig_bdd_606)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not(ap_sig_bdd_606))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not(ap_sig_bdd_606))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_313 assign process. --
    ap_sig_bdd_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_313 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_322 assign process. --
    ap_sig_bdd_322_assign_proc : process(memory_inout_RVALID, exitcond_reg_377)
    begin
                ap_sig_bdd_322 <= ((memory_inout_RVALID = ap_const_logic_0) and (exitcond_reg_377 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_338 assign process. --
    ap_sig_bdd_338_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_338 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_345 assign process. --
    ap_sig_bdd_345_assign_proc : process(memory_inout_RVALID, exitcond1_reg_395)
    begin
                ap_sig_bdd_345 <= ((memory_inout_RVALID = ap_const_logic_0) and (ap_const_lv1_0 = exitcond1_reg_395));
    end process;


    -- ap_sig_bdd_367 assign process. --
    ap_sig_bdd_367_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_367 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_383 assign process. --
    ap_sig_bdd_383_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_383 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_403 assign process. --
    ap_sig_bdd_403_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_403 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_425 assign process. --
    ap_sig_bdd_425_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_425 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_446 assign process. --
    ap_sig_bdd_446_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_446 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_480 assign process. --
    ap_sig_bdd_480_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_480 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_492 assign process. --
    ap_sig_bdd_492_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_492 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_546 assign process. --
    ap_sig_bdd_546_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_546 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_561 assign process. --
    ap_sig_bdd_561_assign_proc : process(ap_sig_cseq_ST_st12_fsm_9, tmp_2_fu_263_p3)
    begin
                ap_sig_bdd_561 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = tmp_2_fu_263_p3));
    end process;


    -- ap_sig_bdd_563 assign process. --
    ap_sig_bdd_563_assign_proc : process(tmp_5_fu_307_p3, ap_sig_cseq_ST_st22_fsm_17)
    begin
                ap_sig_bdd_563 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3));
    end process;


    -- ap_sig_bdd_589 assign process. --
    ap_sig_bdd_589_assign_proc : process(ap_reg_ppstg_exitcond2_reg_413_pp2_it1, ap_reg_ppiten_pp2_it2)
    begin
                ap_sig_bdd_589 <= ((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2));
    end process;


    -- ap_sig_bdd_601 assign process. --
    ap_sig_bdd_601_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_601 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_606 assign process. --
    ap_sig_bdd_606_assign_proc : process(memory_inout_BVALID, tmp_5_reg_404)
    begin
                ap_sig_bdd_606 <= ((memory_inout_BVALID = ap_const_logic_0) and (ap_const_lv1_0 = tmp_5_reg_404));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_64 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_775 assign process. --
    ap_sig_bdd_775_assign_proc : process(memory_inout_AWREADY, grp_foo_foo_user_fu_203_ap_done)
    begin
                ap_sig_bdd_775 <= ((ap_const_logic_1 = memory_inout_AWREADY) and not((ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_8 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_8_assign_proc : process(ap_sig_bdd_313)
    begin
        if (ap_sig_bdd_313) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_15 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_15_assign_proc : process(ap_sig_bdd_338)
    begin
        if (ap_sig_bdd_338) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp2_stg0_fsm_18 assign process. --
    ap_sig_cseq_ST_pp2_stg0_fsm_18_assign_proc : process(ap_sig_bdd_446)
    begin
        if (ap_sig_bdd_446) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_9 assign process. --
    ap_sig_cseq_ST_st12_fsm_9_assign_proc : process(ap_sig_bdd_403)
    begin
        if (ap_sig_bdd_403) then 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_14 assign process. --
    ap_sig_cseq_ST_st17_fsm_14_assign_proc : process(ap_sig_bdd_492)
    begin
        if (ap_sig_bdd_492) then 
            ap_sig_cseq_ST_st17_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_64)
    begin
        if (ap_sig_bdd_64) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_16 assign process. --
    ap_sig_cseq_ST_st21_fsm_16_assign_proc : process(ap_sig_bdd_546)
    begin
        if (ap_sig_bdd_546) then 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_17 assign process. --
    ap_sig_cseq_ST_st22_fsm_17_assign_proc : process(ap_sig_bdd_425)
    begin
        if (ap_sig_bdd_425) then 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st29_fsm_22 assign process. --
    ap_sig_cseq_ST_st29_fsm_22_assign_proc : process(ap_sig_bdd_601)
    begin
        if (ap_sig_bdd_601) then 
            ap_sig_cseq_ST_st29_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_367)
    begin
        if (ap_sig_bdd_367) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_383)
    begin
        if (ap_sig_bdd_383) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_480)
    begin
        if (ap_sig_bdd_480) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_memory_inout_ARREADY assign process. --
    ap_sig_ioackin_memory_inout_ARREADY_assign_proc : process(memory_inout_ARREADY, ap_reg_ioackin_memory_inout_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memory_inout_ARREADY)) then 
            ap_sig_ioackin_memory_inout_ARREADY <= memory_inout_ARREADY;
        else 
            ap_sig_ioackin_memory_inout_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_memory_inout_AWREADY assign process. --
    ap_sig_ioackin_memory_inout_AWREADY_assign_proc : process(memory_inout_AWREADY, ap_reg_ioackin_memory_inout_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memory_inout_AWREADY)) then 
            ap_sig_ioackin_memory_inout_AWREADY <= memory_inout_AWREADY;
        else 
            ap_sig_ioackin_memory_inout_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_memory_inout_WREADY assign process. --
    ap_sig_ioackin_memory_inout_WREADY_assign_proc : process(memory_inout_WREADY, ap_reg_ioackin_memory_inout_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memory_inout_WREADY)) then 
            ap_sig_ioackin_memory_inout_WREADY <= memory_inout_WREADY;
        else 
            ap_sig_ioackin_memory_inout_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- block_in_int_address0 assign process. --
    block_in_int_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_block_in_int_address0, tmp_3_fu_258_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            block_in_int_address0 <= tmp_3_fu_258_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            block_in_int_address0 <= grp_foo_foo_user_fu_203_block_in_int_address0;
        else 
            block_in_int_address0 <= "XXX";
        end if; 
    end process;


    -- block_in_int_ce0 assign process. --
    block_in_int_ce0_assign_proc : process(ap_sig_bdd_322, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_block_in_int_ce0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            block_in_int_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            block_in_int_ce0 <= grp_foo_foo_user_fu_203_block_in_int_ce0;
        else 
            block_in_int_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_in_int_d0 <= reg_212;

    -- block_in_int_we0 assign process. --
    block_in_int_we0_assign_proc : process(ap_sig_bdd_322, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_reg_377_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_377_pp0_it1)))) then 
            block_in_int_we0 <= ap_const_logic_1;
        else 
            block_in_int_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- byte_block_in_offset_0_ack_out assign process. --
    byte_block_in_offset_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not(ap_sig_bdd_606))) then 
            byte_block_in_offset_0_ack_out <= ap_const_logic_1;
        else 
            byte_block_in_offset_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- byte_x_in_in_offset_0_ack_out assign process. --
    byte_x_in_in_offset_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not(ap_sig_bdd_606))) then 
            byte_x_in_in_offset_0_ack_out <= ap_const_logic_1;
        else 
            byte_x_in_in_offset_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- byte_y_out_out_offset_0_ack_out assign process. --
    byte_y_out_out_offset_0_ack_out_assign_proc : process(ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and not(ap_sig_bdd_606))) then 
            byte_y_out_out_offset_0_ack_out <= ap_const_logic_1;
        else 
            byte_y_out_out_offset_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_290_p2 <= "1" when (indvar8_phi_fu_184_p4 = ap_const_lv3_5) else "0";
    exitcond2_fu_334_p2 <= "1" when (indvar1_reg_192 = ap_const_lv3_5) else "0";
    exitcond_fu_246_p2 <= "1" when (indvar_phi_fu_172_p4 = ap_const_lv3_5) else "0";
    foo_BUS_A_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    foo_memory_inout_m_axi_U_ap_dummy_ce <= ap_const_logic_1;
    grp_foo_foo_user_fu_203_ap_start <= grp_foo_foo_user_fu_203_ap_start_ap_start_reg;
    grp_foo_foo_user_fu_203_block_in_int_q0 <= block_in_int_q0;
    grp_foo_foo_user_fu_203_x_in_in_int_q0 <= x_in_in_int_q0;

    -- indvar8_phi_fu_184_p4 assign process. --
    indvar8_phi_fu_184_p4_assign_proc : process(indvar8_reg_180, ap_sig_cseq_ST_pp1_stg0_fsm_15, exitcond1_reg_395, ap_reg_ppiten_pp1_it1, indvar_next9_reg_399)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond1_reg_395) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) then 
            indvar8_phi_fu_184_p4 <= indvar_next9_reg_399;
        else 
            indvar8_phi_fu_184_p4 <= indvar8_reg_180;
        end if; 
    end process;

    indvar_next1_fu_340_p2 <= std_logic_vector(unsigned(indvar1_reg_192) + unsigned(ap_const_lv3_1));
    indvar_next9_fu_296_p2 <= std_logic_vector(unsigned(indvar8_phi_fu_184_p4) + unsigned(ap_const_lv3_1));
    indvar_next_fu_252_p2 <= std_logic_vector(unsigned(indvar_phi_fu_172_p4) + unsigned(ap_const_lv3_1));

    -- indvar_phi_fu_172_p4 assign process. --
    indvar_phi_fu_172_p4_assign_proc : process(indvar_reg_168, ap_sig_cseq_ST_pp0_stg0_fsm_8, exitcond_reg_377, ap_reg_ppiten_pp0_it1, indvar_next_reg_381)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            indvar_phi_fu_172_p4 <= indvar_next_reg_381;
        else 
            indvar_phi_fu_172_p4 <= indvar_reg_168;
        end if; 
    end process;


    -- memory_inout_ARADDR assign process. --
    memory_inout_ARADDR_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_1_fu_236_p1, tmp_4_fu_279_p1, ap_reg_ioackin_memory_inout_ARREADY, ap_sig_bdd_561)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_memory_inout_ARREADY)) then
            if (ap_sig_bdd_561) then 
                memory_inout_ARADDR <= tmp_4_fu_279_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                memory_inout_ARADDR <= tmp_1_fu_236_p1(32 - 1 downto 0);
            else 
                memory_inout_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            memory_inout_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    memory_inout_ARBURST <= ap_const_lv2_0;
    memory_inout_ARCACHE <= ap_const_lv4_0;
    memory_inout_ARID <= ap_const_lv1_0;
    memory_inout_ARLEN <= ap_const_lv32_5;
    memory_inout_ARLOCK <= ap_const_lv2_0;
    memory_inout_ARPROT <= ap_const_lv3_0;
    memory_inout_ARQOS <= ap_const_lv4_0;
    memory_inout_ARREGION <= ap_const_lv4_0;
    memory_inout_ARSIZE <= ap_const_lv3_0;
    memory_inout_ARUSER <= ap_const_lv1_0;

    -- memory_inout_ARVALID assign process. --
    memory_inout_ARVALID_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st12_fsm_9, tmp_2_fu_263_p3, ap_reg_ioackin_memory_inout_ARREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_logic_0 = ap_reg_ioackin_memory_inout_ARREADY)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_9) and (ap_const_lv1_0 = tmp_2_fu_263_p3) and (ap_const_logic_0 = ap_reg_ioackin_memory_inout_ARREADY)))) then 
            memory_inout_ARVALID <= ap_const_logic_1;
        else 
            memory_inout_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    memory_inout_AWADDR <= tmp_6_fu_323_p1(32 - 1 downto 0);
    memory_inout_AWBURST <= ap_const_lv2_0;
    memory_inout_AWCACHE <= ap_const_lv4_0;
    memory_inout_AWID <= ap_const_lv1_0;
    memory_inout_AWLEN <= ap_const_lv32_5;
    memory_inout_AWLOCK <= ap_const_lv2_0;
    memory_inout_AWPROT <= ap_const_lv3_0;
    memory_inout_AWQOS <= ap_const_lv4_0;
    memory_inout_AWREGION <= ap_const_lv4_0;
    memory_inout_AWSIZE <= ap_const_lv3_0;
    memory_inout_AWUSER <= ap_const_lv1_0;

    -- memory_inout_AWVALID assign process. --
    memory_inout_AWVALID_assign_proc : process(tmp_5_fu_307_p3, ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_ap_done, ap_reg_ioackin_memory_inout_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17) and (ap_const_lv1_0 = tmp_5_fu_307_p3) and not((ap_const_logic_0 = grp_foo_foo_user_fu_203_ap_done)) and (ap_const_logic_0 = ap_reg_ioackin_memory_inout_AWREADY))) then 
            memory_inout_AWVALID <= ap_const_logic_1;
        else 
            memory_inout_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- memory_inout_BREADY assign process. --
    memory_inout_BREADY_assign_proc : process(tmp_5_reg_404, ap_sig_cseq_ST_st29_fsm_22, ap_sig_bdd_606)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st29_fsm_22) and (ap_const_lv1_0 = tmp_5_reg_404) and not(ap_sig_bdd_606))) then 
            memory_inout_BREADY <= ap_const_logic_1;
        else 
            memory_inout_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- memory_inout_RREADY assign process. --
    memory_inout_RREADY_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_8, exitcond_reg_377, ap_sig_bdd_322, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp1_stg0_fsm_15, exitcond1_reg_395, ap_sig_bdd_345, ap_reg_ppiten_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_8) and (exitcond_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_322 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_15) and (ap_const_lv1_0 = exitcond1_reg_395) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then 
            memory_inout_RREADY <= ap_const_logic_1;
        else 
            memory_inout_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    memory_inout_WDATA <= y_out_out_int_load_reg_427;
    memory_inout_WID <= ap_const_lv1_0;
    memory_inout_WLAST <= ap_const_logic_0;
    memory_inout_WSTRB <= ap_const_lv4_F;
    memory_inout_WUSER <= ap_const_lv1_0;

    -- memory_inout_WVALID assign process. --
    memory_inout_WVALID_assign_proc : process(ap_reg_ppstg_exitcond2_reg_413_pp2_it1, ap_reg_ppiten_pp2_it2, ap_reg_ioackin_memory_inout_WREADY)
    begin
        if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2) and (ap_const_logic_0 = ap_reg_ioackin_memory_inout_WREADY))) then 
            memory_inout_WVALID <= ap_const_logic_1;
        else 
            memory_inout_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_236_p1 <= std_logic_vector(resize(unsigned(tmp_1_cast_reg_366),64));
    tmp_2_fu_263_p3 <= byte_x_in_in_offset_read_reg_357(31 downto 31);
    tmp_3_fu_258_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar_reg_168_pp0_it1),64));
    tmp_4_fu_279_p1 <= std_logic_vector(resize(unsigned(tmp_5_cast_fu_270_p4),64));
    tmp_5_cast_fu_270_p4 <= byte_x_in_in_offset_read_reg_357(31 downto 2);
    tmp_5_fu_307_p3 <= byte_y_out_out_offset_read_reg_351(31 downto 31);
    tmp_6_fu_323_p1 <= std_logic_vector(resize(unsigned(tmp_9_cast_fu_314_p4),64));
    tmp_7_fu_302_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_indvar8_reg_180_pp1_it1),64));
    tmp_9_cast_fu_314_p4 <= byte_y_out_out_offset_read_reg_351(31 downto 2);
    tmp_fu_218_p3 <= byte_block_in_offset_0_data_reg(31 downto 31);
    tmp_s_fu_346_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_192),64));

    -- x_in_in_int_address0 assign process. --
    x_in_in_int_address0_assign_proc : process(ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_x_in_in_int_address0, tmp_7_fu_302_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            x_in_in_int_address0 <= tmp_7_fu_302_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            x_in_in_int_address0 <= grp_foo_foo_user_fu_203_x_in_in_int_address0;
        else 
            x_in_in_int_address0 <= "XXX";
        end if; 
    end process;


    -- x_in_in_int_ce0 assign process. --
    x_in_in_int_ce0_assign_proc : process(ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_x_in_in_int_ce0)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then 
            x_in_in_int_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            x_in_in_int_ce0 <= grp_foo_foo_user_fu_203_x_in_in_int_ce0;
        else 
            x_in_in_int_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_in_in_int_d0 <= reg_212;

    -- x_in_in_int_we0 assign process. --
    x_in_in_int_we0_assign_proc : process(ap_sig_bdd_345, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_exitcond1_reg_395_pp1_it1)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_345 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_395_pp1_it1)))) then 
            x_in_in_int_we0 <= ap_const_logic_1;
        else 
            x_in_in_int_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- y_out_out_int_address0 assign process. --
    y_out_out_int_address0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_pp2_stg0_fsm_18, ap_reg_ppiten_pp2_it0, grp_foo_foo_user_fu_203_y_out_out_int_address0, tmp_s_fu_346_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            y_out_out_int_address0 <= tmp_s_fu_346_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            y_out_out_int_address0 <= grp_foo_foo_user_fu_203_y_out_out_int_address0;
        else 
            y_out_out_int_address0 <= "XXX";
        end if; 
    end process;


    -- y_out_out_int_ce0 assign process. --
    y_out_out_int_ce0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_17, ap_sig_cseq_ST_pp2_stg0_fsm_18, ap_reg_ppiten_pp2_it0, ap_reg_ppstg_exitcond2_reg_413_pp2_it1, ap_sig_ioackin_memory_inout_WREADY, ap_reg_ppiten_pp2_it2, grp_foo_foo_user_fu_203_y_out_out_int_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_18) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0) and not(((ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_413_pp2_it1) and (ap_const_logic_0 = ap_sig_ioackin_memory_inout_WREADY) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it2))))) then 
            y_out_out_int_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            y_out_out_int_ce0 <= grp_foo_foo_user_fu_203_y_out_out_int_ce0;
        else 
            y_out_out_int_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_out_out_int_d0 <= grp_foo_foo_user_fu_203_y_out_out_int_d0;

    -- y_out_out_int_we0 assign process. --
    y_out_out_int_we0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_17, grp_foo_foo_user_fu_203_y_out_out_int_we0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_17)) then 
            y_out_out_int_we0 <= grp_foo_foo_user_fu_203_y_out_out_int_we0;
        else 
            y_out_out_int_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
