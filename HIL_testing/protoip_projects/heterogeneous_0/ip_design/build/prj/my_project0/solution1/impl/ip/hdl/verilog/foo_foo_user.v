// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module foo_foo_user (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        block_in_int_address0,
        block_in_int_ce0,
        block_in_int_q0,
        x_in_in_int_address0,
        x_in_in_int_ce0,
        x_in_in_int_q0,
        y_out_out_int_address0,
        y_out_out_int_ce0,
        y_out_out_int_we0,
        y_out_out_int_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 17'b1;
parameter    ap_ST_st2_fsm_1 = 17'b10;
parameter    ap_ST_st3_fsm_2 = 17'b100;
parameter    ap_ST_st4_fsm_3 = 17'b1000;
parameter    ap_ST_st5_fsm_4 = 17'b10000;
parameter    ap_ST_st6_fsm_5 = 17'b100000;
parameter    ap_ST_st7_fsm_6 = 17'b1000000;
parameter    ap_ST_st8_fsm_7 = 17'b10000000;
parameter    ap_ST_st9_fsm_8 = 17'b100000000;
parameter    ap_ST_st10_fsm_9 = 17'b1000000000;
parameter    ap_ST_st11_fsm_10 = 17'b10000000000;
parameter    ap_ST_st12_fsm_11 = 17'b100000000000;
parameter    ap_ST_st13_fsm_12 = 17'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 17'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 17'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 17'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 17'b10000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] block_in_int_address0;
output   block_in_int_ce0;
input  [31:0] block_in_int_q0;
output  [2:0] x_in_in_int_address0;
output   x_in_in_int_ce0;
input  [31:0] x_in_in_int_q0;
output  [2:0] y_out_out_int_address0;
output   y_out_out_int_ce0;
output   y_out_out_int_we0;
output  [31:0] y_out_out_int_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg block_in_int_ce0;
reg x_in_in_int_ce0;
reg y_out_out_int_ce0;
reg y_out_out_int_we0;
reg[31:0] y_out_out_int_d0;
(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm = 17'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_35;
wire   [2:0] i_1_fu_136_p2;
reg   [2:0] i_1_reg_184;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_66;
reg   [2:0] y_out_out_int_addr_reg_189;
wire   [0:0] exitcond2_fu_130_p2;
wire   [2:0] i_block_1_fu_153_p2;
reg   [2:0] i_block_1_reg_197;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_81;
wire   [0:0] exitcond1_fu_147_p2;
reg   [31:0] block_in_int_load_reg_207;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_94;
wire   [31:0] grp_fu_124_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_103;
wire   [2:0] i_x_in_1_fu_170_p2;
reg   [2:0] i_x_in_1_reg_220;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_112;
wire   [0:0] exitcond_fu_164_p2;
reg   [31:0] x_in_in_int_load_reg_230;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_125;
reg   [31:0] tmp_6_reg_235;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_133;
reg   [2:0] i_reg_67;
reg   [31:0] storemerge_reg_78;
reg   [2:0] i_block_reg_91;
reg   [31:0] tmp_4_reg_102;
reg    ap_sig_cseq_ST_st17_fsm_16;
reg    ap_sig_bdd_154;
reg   [2:0] i_x_in_reg_113;
wire   [63:0] tmp_fu_142_p1;
wire   [63:0] tmp_2_fu_159_p1;
wire   [63:0] tmp_5_fu_176_p1;
reg   [31:0] grp_fu_124_p0;
reg   [31:0] grp_fu_124_p1;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_171;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_178;
wire    grp_fu_124_ce;
reg   [16:0] ap_NS_fsm;


foo_fadd_32ns_32ns_32_5_full_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
foo_fadd_32ns_32ns_32_5_full_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_124_p0 ),
    .din1( grp_fu_124_p1 ),
    .ce( grp_fu_124_ce ),
    .dout( grp_fu_124_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        i_block_reg_91 <= i_block_1_reg_197;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_130_p2 == ap_const_lv1_0))) begin
        i_block_reg_91 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_lv1_0 == exitcond_fu_164_p2))) begin
        i_reg_67 <= i_1_reg_184;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_67 <= ap_const_lv3_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_147_p2))) begin
        i_x_in_reg_113 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        i_x_in_reg_113 <= i_x_in_1_reg_220;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        storemerge_reg_78 <= grp_fu_124_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_130_p2 == ap_const_lv1_0))) begin
        storemerge_reg_78 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_147_p2))) begin
        tmp_4_reg_102 <= storemerge_reg_78;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        tmp_4_reg_102 <= tmp_6_reg_235;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        block_in_int_load_reg_207 <= block_in_int_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_184 <= i_1_fu_136_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_block_1_reg_197 <= i_block_1_fu_153_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_x_in_1_reg_220 <= i_x_in_1_fu_170_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        tmp_6_reg_235 <= grp_fu_124_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        x_in_in_int_load_reg_230 <= x_in_in_int_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_130_p2 == ap_const_lv1_0))) begin
        y_out_out_int_addr_reg_189 <= tmp_fu_142_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_130_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_130_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_130_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_130_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_112)
begin
    if (ap_sig_bdd_112) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_125)
begin
    if (ap_sig_bdd_125) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_178)
begin
    if (ap_sig_bdd_178) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_133)
begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st17_fsm_16 assign process. ///
always @ (ap_sig_bdd_154)
begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st17_fsm_16 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_35)
begin
    if (ap_sig_bdd_35) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_66)
begin
    if (ap_sig_bdd_66) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_81)
begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_94)
begin
    if (ap_sig_bdd_94) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_171)
begin
    if (ap_sig_bdd_171) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_103)
begin
    if (ap_sig_bdd_103) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// block_in_int_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        block_in_int_ce0 = ap_const_logic_1;
    end else begin
        block_in_int_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_124_p0 assign process. ///
always @ (storemerge_reg_78 or tmp_4_reg_102 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st12_fsm_11)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_fu_124_p0 = tmp_4_reg_102;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_124_p0 = storemerge_reg_78;
    end else begin
        grp_fu_124_p0 = 'bx;
    end
end

/// grp_fu_124_p1 assign process. ///
always @ (block_in_int_load_reg_207 or x_in_in_int_load_reg_230 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st12_fsm_11)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_fu_124_p1 = x_in_in_int_load_reg_230;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        grp_fu_124_p1 = block_in_int_load_reg_207;
    end else begin
        grp_fu_124_p1 = 'bx;
    end
end

/// x_in_in_int_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st10_fsm_9)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        x_in_in_int_ce0 = ap_const_logic_1;
    end else begin
        x_in_in_int_ce0 = ap_const_logic_0;
    end
end

/// y_out_out_int_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        y_out_out_int_ce0 = ap_const_logic_1;
    end else begin
        y_out_out_int_ce0 = ap_const_logic_0;
    end
end

/// y_out_out_int_d0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or tmp_6_reg_235 or storemerge_reg_78 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16)) begin
        y_out_out_int_d0 = tmp_6_reg_235;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        y_out_out_int_d0 = storemerge_reg_78;
    end else begin
        y_out_out_int_d0 = 'bx;
    end
end

/// y_out_out_int_we0 assign process. ///
always @ (ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st17_fsm_16)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st17_fsm_16))) begin
        y_out_out_int_we0 = ap_const_logic_1;
    end else begin
        y_out_out_int_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_130_p2 or exitcond1_fu_147_p2 or exitcond_fu_164_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_130_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_147_p2)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_164_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_103 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_103 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_112 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_112 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_125 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_125 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_133 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_154 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end

/// ap_sig_bdd_171 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_171 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_178 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_178 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_35 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_35 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_66 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_81 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_94 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_94 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign block_in_int_address0 = tmp_2_fu_159_p1;
assign exitcond1_fu_147_p2 = (i_block_reg_91 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond2_fu_130_p2 = (i_reg_67 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond_fu_164_p2 = (i_x_in_reg_113 == ap_const_lv3_5? 1'b1: 1'b0);
assign grp_fu_124_ce = ap_const_logic_1;
assign i_1_fu_136_p2 = (i_reg_67 + ap_const_lv3_1);
assign i_block_1_fu_153_p2 = (i_block_reg_91 + ap_const_lv3_1);
assign i_x_in_1_fu_170_p2 = (i_x_in_reg_113 + ap_const_lv3_1);
assign tmp_2_fu_159_p1 = i_block_reg_91;
assign tmp_5_fu_176_p1 = i_x_in_reg_113;
assign tmp_fu_142_p1 = i_reg_67;
assign x_in_in_int_address0 = tmp_5_fu_176_p1;
assign y_out_out_int_address0 = y_out_out_int_addr_reg_189;


endmodule //foo_foo_user

